// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package sqlite

import (
	"context"
)

const channelToSerial = `-- name: ChannelToSerial :one
INSERT OR IGNORE
	INTO channel_serials (user_id, channel_id, serial)
	VALUES (
		?,
		?,
		(SELECT COALESCE(MAX(serial) + 1, 1) FROM channel_serials WHERE channel_serials.user_id = ?))
	RETURNING serial
`

type ChannelToSerialParams struct {
	UserID    int64
	ChannelID int64
	UserID_2  int64
}

func (q *Queries) ChannelToSerial(ctx context.Context, arg ChannelToSerialParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, channelToSerial, arg.UserID, arg.ChannelID, arg.UserID_2)
	var serial int64
	err := row.Scan(&serial)
	return serial, err
}

const serialToChannel = `-- name: SerialToChannel :one
SELECT channel_id FROM channel_serials WHERE user_id = ? AND serial = ? LIMIT 1
`

type SerialToChannelParams struct {
	UserID int64
	Serial int64
}

func (q *Queries) SerialToChannel(ctx context.Context, arg SerialToChannelParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, serialToChannel, arg.UserID, arg.Serial)
	var channel_id int64
	err := row.Scan(&channel_id)
	return channel_id, err
}
